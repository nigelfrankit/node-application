ServerResponse {
    domain: null,
    _events: {
        finish: [Function: bound resOnFinish]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    output: [],
    outputEncodings: [],
    outputCallbacks: [],
    outputSize: 0,
    writable: true,
    _last: false,
    upgrading: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
        connecting: false,
        _hadError: false,
        _handle: TCP {
            reading: true,
            owner: [Circular],
            onread: [Function: onread],
            onconnection: null,
            writeQueueSize: 0,
            _consumed: true
        },
        _parent: null,
        _host: null,
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [BufferList],
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null
        },
        readable: true,
        domain: null,
        _events: {
            end: [Array],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Array],
            timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [Array],
            resume: [Function: onSocketResume],
            pause: [Function: onSocketPause]
        },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: [Object]
        },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 396,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: Server {
            domain: null,
            _events: [Object],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 120000,
            keepAliveTimeout: 5000,
            _pendingResponseData: 0,
            maxHeadersCount: null,
            _connectionKey: '6::::3000',
            [Symbol(asyncId)]: 7
        },
        _server: Server {
            domain: null,
            _events: [Object],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 120000,
            keepAliveTimeout: 5000,
            _pendingResponseData: 0,
            maxHeadersCount: null,
            _connectionKey: '6::::3000',
            [Symbol(asyncId)]: 7
        },
        _idleTimeout: 120000,
        _idleNext: TimersList {
            _idleNext: [Circular],
            _idlePrev: [Circular],
            _unrefed: true,
            msecs: 120000,
            nextTick: false,
            _timer: [Timer]
        },
        _idlePrev: TimersList {
            _idleNext: [Circular],
            _idlePrev: [Circular],
            _unrefed: true,
            msecs: 120000,
            nextTick: false,
            _timer: [Timer]
        },
        _idleStart: 6538,
        _destroyed: false,
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
            _url: '',
            _consumed: true,
            socket: [Circular],
            incoming: [IncomingMessage],
            outgoing: null,
            maxHeaderPairs: 2000,
            onIncoming: [Function: bound parserOnIncoming]
        },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 10,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 12,
        [Symbol(triggerAsyncId)]: 7
    },
    connection: Socket {
        connecting: false,
        _hadError: false,
        _handle: TCP {
            reading: true,
            owner: [Circular],
            onread: [Function: onread],
            onconnection: null,
            writeQueueSize: 0,
            _consumed: true
        },
        _parent: null,
        _host: null,
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [BufferList],
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null
        },
        readable: true,
        domain: null,
        _events: {
            end: [Array],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Array],
            timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [Array],
            resume: [Function: onSocketResume],
            pause: [Function: onSocketPause]
        },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: [Object]
        },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 396,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: Server {
            domain: null,
            _events: [Object],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 120000,
            keepAliveTimeout: 5000,
            _pendingResponseData: 0,
            maxHeadersCount: null,
            _connectionKey: '6::::3000',
            [Symbol(asyncId)]: 7
        },
        _server: Server {
            domain: null,
            _events: [Object],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 120000,
            keepAliveTimeout: 5000,
            _pendingResponseData: 0,
            maxHeadersCount: null,
            _connectionKey: '6::::3000',
            [Symbol(asyncId)]: 7
        },
        _idleTimeout: 120000,
        _idleNext: TimersList {
            _idleNext: [Circular],
            _idlePrev: [Circular],
            _unrefed: true,
            msecs: 120000,
            nextTick: false,
            _timer: [Timer]
        },
        _idlePrev: TimersList {
            _idleNext: [Circular],
            _idlePrev: [Circular],
            _unrefed: true,
            msecs: 120000,
            nextTick: false,
            _timer: [Timer]
        },
        _idleStart: 6538,
        _destroyed: false,
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
            _url: '',
            _consumed: true,
            socket: [Circular],
            incoming: [IncomingMessage],
            outgoing: null,
            maxHeaderPairs: 2000,
            onIncoming: [Function: bound parserOnIncoming]
        },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 10,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 12,
        [Symbol(triggerAsyncId)]: 7
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: IncomingMessage {
            _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: [BufferList],
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: null,
                ended: true,
                endEmitted: false,
                reading: false,
                sync: true,
                needReadable: false,
                emittedReadable: true,
                readableListening: false,
                resumeScheduled: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrain: 0,
                readingMore: true,
                decoder: null,
                encoding: null
            },
            readable: true,
            domain: null,
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            socket: Socket {
                connecting: false,
                _hadError: false,
                _handle: [TCP],
                _parent: null,
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                domain: null,
                _events: [Object],
                _eventsCount: 10,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: true,
                _bytesDispatched: 396,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: [Server],
                _idleTimeout: 120000,
                _idleNext: [TimersList],
                _idlePrev: [TimersList],
                _idleStart: 6538,
                _destroyed: false,
                parser: [HTTPParser],
                on: [Function: socketOnWrap],
                _paused: false,
                read: [Function],
                _consuming: true,
                _httpMessage: [Circular],
                [Symbol(asyncId)]: 10,
                [Symbol(bytesRead)]: 0,
                [Symbol(asyncId)]: 12,
                [Symbol(triggerAsyncId)]: 7
            },
            connection: Socket {
                connecting: false,
                _hadError: false,
                _handle: [TCP],
                _parent: null,
                _host: null,
                _readableState: [ReadableState],
                readable: true,
                domain: null,
                _events: [Object],
                _eventsCount: 10,
                _maxListeners: undefined,
                _writableState: [WritableState],
                writable: true,
                allowHalfOpen: true,
                _bytesDispatched: 396,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: [Server],
                _server: [Server],
                _idleTimeout: 120000,
                _idleNext: [TimersList],
                _idlePrev: [TimersList],
                _idleStart: 6538,
                _destroyed: false,
                parser: [HTTPParser],
                on: [Function: socketOnWrap],
                _paused: false,
                read: [Function],
                _consuming: true,
                _httpMessage: [Circular],
                [Symbol(asyncId)]: 10,
                [Symbol(bytesRead)]: 0,
                [Symbol(asyncId)]: 12,
                [Symbol(triggerAsyncId)]: 7
            },
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari / 537.36 ',
                accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                referer: 'https://cebciamtest-developer-edition.na73.force.com/',
                'accept-encoding': 'gzip, deflate, br',
                'accept-language': 'en-US,en;q=0.9',
                cookie: '%2Fnpusername=057106; npac_ticket=00; session=eyJwYXNzcG9ydCI6eyJ1c2VyIjp7InVzZXJpZCI6Imtra2tra2tra2tra2 tra2tra2tra2tra2tra2tra2sifX19;session.sig = QQlmd748RBQObmpkd4KY9Zb9CNA ' },
                rawHeaders: ['Host',
                    'localhost:3000',
                    'Connection',
                    'keep-alive',
                    'Upgrade-Insecure-Requests',
                    '1',
                    'User-Agent',
                    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/57.36 ',
                    'Accept',
                    'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                    'Referer',
                    'https://cebciamtest-developer-edition.na73.force.com/',
                    'Accept-Encoding',
                    'gzip, deflate, br',
                    'Accept-Language',
                    'en-US,en;q=0.9',
                    'Cookie',
                    '%2Fnpusername=057106; npac_ticket=00; session=eyJwYXNzcG9ydCI6eyJ1c2VyIjp7InVzZXJpZCI6Imtra2tra2tra2tra2tra2tra2 tra2tra2tra2tra2sifX19;session.sig = QQlmd748RBQObmpkd4KY9Zb9CNA ' ],
                    trailers: {},
                    rawTrailers: [],
                    upgrade: false,
                    url: '/sf/redirect?code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3D&sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ',
                    method: 'GET',
                    statusCode: null,
                    statusMessage: null,
                    client:
                    Socket {
                        connecting: false,
                        _hadError: false,
                        _handle: [TCP],
                        _parent: null,
                        _host: null,
                        _readableState: [ReadableState],
                        readable: true,
                        domain: null,
                        _events: [Object],
                        _eventsCount: 10,
                        _maxListeners: undefined,
                        _writableState: [WritableState],
                        writable: true,
                        allowHalfOpen: true,
                        _bytesDispatched: 396,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: [Server],
                        _server: [Server],
                        _idleTimeout: 120000,
                        _idleNext: [TimersList],
                        _idlePrev: [TimersList],
                        _idleStart: 6538,
                        _destroyed: false,
                        parser: [HTTPParser],
                        on: [Function: socketOnWrap],
                        _paused: false,
                        read: [Function],
                        _consuming: true,
                        _httpMessage: [Circular],
                        [Symbol(asyncId)]: 10,
                        [Symbol(bytesRead)]: 0,
                        [Symbol(asyncId)]: 12,
                        [Symbol(triggerAsyncId)]: 7
                    },
                    _consuming: false,
                    _dumped: false,
                    next: [Function: next],
                    baseUrl: '/auth',
                    originalUrl: '/auth/sf/redirect?code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3 D & sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ',
                    _parsedUrl:
                    Url {
                        protocol: null,
                        slashes: null,
                        auth: null,
                        host: null,
                        port: null,
                        hostname: null,
                        hash: null,
                        search: '?code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3D&sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ',
                        query: 'code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3D&sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ',
                        pathname: '/sf/redirect',
                        path: '/sf/redirect?code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3D&sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ',
                        href: '/sf/redirect?code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3D&sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ',
                        _raw: '/sf/redirect?code=aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ%3D%3D&sfdc_community_url = https % 3 A % 2 F % 2 Fcebciamtest - developer - edition.na73.force.com & sfdc_community_id = 0 DB1I0000004D1eWAE ' },
                        params: {},
                        query: {
                            code: 'aPrxbOND3gL_2LZkfGj1PP3f4HJ5C16WEniKZIwbjPQDIWeTmI5CjgiYvm2y30uZRrSpvLtdAQ==',
                            sfdc_community_url: 'https://cebciamtest-developer-edition.na73.force.com',
                            sfdc_community_id: '0DB1I0000004D1eWAE'
                        },
                        res: [Circular],
                        sessionCookies: Cookies {
                            secure: undefined,
                            request: [Circular],
                            response: [Circular],
                            keys: [Keygrip]
                        },
                        sessionOptions: {},
                        sessionKey: 'session',
                        session: [Getter / Setter],
                        _passport: {
                            instance: [Authenticator],
                            session: [Object]
                        },
                        user: {
                            userid: 'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk'
                        },
                        route: Route {
                            path: '/sf/redirect',
                            stack: [Array],
                            methods: [Object]
                        },
                        authInfo: {}
                    },
                    locals: {},
                    writeHead: [Function: writeHead],
                    [Symbol(outHeadersKey)]: {
                        'x-powered-by': ['X-Powered-By', 'Express']
                    }
                }
